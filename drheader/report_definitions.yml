Title: Improper Headers Configuration
Headers:
    Content-Security-Policy:
        Description: "A Content Security Policy (CSP) requires careful tuning and precise definition of the policy. If enabled, CSP has significant impact on the way browsers render pages (e.g., inline JavaScript is disabled by default and must be explicitly allowed in the policy). CSP prevents a wide range of attacks, including cross-site scripting and other cross-site injections."
        Mitigation: "##### Enable in Nginx

        `add_header Content-Security-Policy \"{0}\" always;`

        ##### Enable in Apache
        
        `header always set Content-Security-Policy \"{0}\"`

        "
        References:
        - https://owasp.org/www-community/attacks/Content_Security_Policy
        - https://www.w3.org/TR/CSP/
    Server:
        Description: "The web server is currently returning the `Server` header. This header can reveal usefull information for an attacker about the technology and versions of the web server that supoort the application. This will allow him to focus in vulnerabilities that affect this product."
        Mitigation: The `Server` header should be completly removed from the server responses or in alternative should contain a generic name that does not give additional information to an attacker."
        References:
    Strict-Transport-Security:
        Description: "HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797. A server implements an HSTS policy by supplying a header `Strict-Transport-Security` over an HTTPS connection (HSTS headers over HTTP are ignored)."
        Mitigation: "##### Enable in Nginx

        `add_header Strict-Transport-Security \"{0}\" always;`

        ##### Enable in Apache

        `header always set Strict-Transport-Security \"{0}\"`

        "
        References:
        - https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html
        - https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security
    X-Frame-Options:
        Description: "The `X-Frame-Options` response header improves the protection of web applications against clickjacking. It instructs the browser whether the content can be displayed within frames. The CSP frame-ancestors directive obsoletes the `X-Frame-Options` header. If a resource has both policies, the CSP frame-ancestors policy will be enforced and the X-Frame-Options policy will be ignored."
        Mitigation: "##### Enable in Nginx

        `add_header X-Frame-Options \"{0}\" always;`

        ##### Enable in Apache
        
        `header always set X-Frame-Options \"{0}\"`

        "
        References:
        - https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options
    X-Content-Type-Options:
        Description: "Setting this header will prevent the browser from interpreting files as a different MIME type to what is specified in the Content-Type HTTP header (e.g. treating text/plain as text/css)."
        Mitigation: "##### Enable in Nginx

        `add_header X-Content-Type-Options \"{0}\" always;`

        ##### Enable in Apache

        `header always set X-Content-Type-Options \"{0}\"`

        "
        References:
        - https://developer.mozilla.org/pt-PT/docs/Web/HTTP/Headers/X-Content-Type-Options
    Referrer-Policy:
        Description: "The `Referrer-Policy` HTTP header governs which referrer information, sent in the Referer header, should be included with requests made."
        Mitigation: "##### Enable in Nginx

        `add_header Referrer-Policy \"{0}\" always;`

        ##### Enable in Apache

        `header always set Referrer-Policy \"{0}\"`

        "
        References:
        - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy
    Cache-Control:
        Description: Without proper configuration, Browsers might store a local cached copy of content received from web servers. Some browsers can even cache content accesses via HTTPS. This behaviour might allow sensitive information returned by the application to be stored in the local cache, making it available to an attacker that is able to obtain access to the computer containing the local cache.
        Mitigation: "##### Enable in Nginx

        `add_header Cache-Control \"{0}\" always;`

        ##### Enable in Apache
        
        `header always set Cache-Control \"{0}\"`

        "
        References:
        - https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses
    Pragma:
        Description: Without proper configuration, Browsers might store a local cached copy of content received from web servers. Some browsers can even cache content accesses via HTTPS. This behaviour might allow sensitive information returned by the application to be stored in the local cache, making it available to an attacker that is able to obtain access to the computer containing the local cache.
        Mitigation:  "##### Enable in Nginx

        `add_header Pragma \"{0}\" always;`

        ##### Enable in Apache

        `header always set Pragma \"{0}\"`

        "
        References:
        - https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses
    X-powered-by:
        Description: "The web server is currently returning the `X-powered-by` header. This header can reveal usefull information for an attacker about the technology and versions of products that supoort the application. This will allow him to focus in vulnerabilities that affect these products."
        Mitigation: "The `X-powered-by` header should be completly removed from the server responses."
        References:
    X-AspNet-Version: 
        Description: "The web server is currently returning the `X-AspNet-Version` header. This header can reveal usefull information for an attacker about the .NET version used by the application. This will allow him to focus in vulnerabilities that affect this particular version of .NET"
        Mitigation: "The `X-AspNet-Version` header should be completly removed from the server responses."
        References:
    X-Generator:
        Description: "The web server is currently returning the `X-Generator` header. This header can reveal usefull information for an attacker about the Drupal version used by the application. This will allow him to focus in vulnerabilities that affect this particular version of Drupal"
        Mitigation: "The `X-Generator` header should be completly removed from the server responses."
        References:
        - https://www.drupal.org/project/remove_http_headers